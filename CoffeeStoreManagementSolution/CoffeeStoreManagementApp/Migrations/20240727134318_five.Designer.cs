// <auto-generated />
using System;
using CoffeeStoreManagementApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeStoreManagementApp.Migrations
{
    [DbContext(typeof(CoffeeManagementContext))]
    [Migration("20240727134318_five")]
    partial class five
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Capacity", b =>
                {
                    b.Property<int>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapacityId"), 1L, 1);

                    b.Property<string>("CapacityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("CapacityId");

                    b.ToTable("Capacity");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<string>("AddOns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<double>("PricePerCoffee")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("CoffeeId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAllowedSauces")
                        .HasColumnType("int");

                    b.Property<int>("MaxAllowedToppings")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coffees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Strong black coffee",
                            MaxAllowedSauces = 2,
                            MaxAllowedToppings = 0,
                            Name = "Espresso",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 2,
                            Description = "Espresso with steamed milk",
                            MaxAllowedSauces = 3,
                            MaxAllowedToppings = 0,
                            Name = "Latte",
                            Price = 3.5
                        },
                        new
                        {
                            Id = 3,
                            Description = "Espresso with steamed milk foam",
                            MaxAllowedSauces = 3,
                            MaxAllowedToppings = 0,
                            Name = "Cappuccino",
                            Price = 3.75
                        },
                        new
                        {
                            Id = 4,
                            Description = "Espresso diluted with hot water",
                            MaxAllowedSauces = 2,
                            MaxAllowedToppings = 0,
                            Name = "Americano",
                            Price = 3.0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Espresso with chocolate and steamed milk",
                            MaxAllowedSauces = 4,
                            MaxAllowedToppings = 0,
                            Name = "Mocha",
                            Price = 4.0
                        });
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeCapacity", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "CapacityId");

                    b.HasIndex("CapacityId");

                    b.ToTable("CoffeeCapacity");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeMilk", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<int>("MilkId")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "MilkId");

                    b.HasIndex("MilkId");

                    b.ToTable("CoffeeMilk");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeNonDairyAlternative", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<int>("NonDairyAlternativeId")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "NonDairyAlternativeId");

                    b.HasIndex("NonDairyAlternativeId");

                    b.ToTable("CoffeeNonDairyAlternative");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeSauce", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<int>("SauceId")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "SauceId");

                    b.HasIndex("SauceId");

                    b.ToTable("CoffeeSauces");

                    b.HasData(
                        new
                        {
                            CoffeeId = 1,
                            SauceId = 1
                        },
                        new
                        {
                            CoffeeId = 1,
                            SauceId = 2
                        },
                        new
                        {
                            CoffeeId = 2,
                            SauceId = 1
                        },
                        new
                        {
                            CoffeeId = 2,
                            SauceId = 2
                        },
                        new
                        {
                            CoffeeId = 2,
                            SauceId = 3
                        },
                        new
                        {
                            CoffeeId = 3,
                            SauceId = 1
                        },
                        new
                        {
                            CoffeeId = 3,
                            SauceId = 2
                        },
                        new
                        {
                            CoffeeId = 3,
                            SauceId = 4
                        },
                        new
                        {
                            CoffeeId = 4,
                            SauceId = 1
                        },
                        new
                        {
                            CoffeeId = 4,
                            SauceId = 2
                        },
                        new
                        {
                            CoffeeId = 5,
                            SauceId = 1
                        },
                        new
                        {
                            CoffeeId = 5,
                            SauceId = 2
                        },
                        new
                        {
                            CoffeeId = 5,
                            SauceId = 3
                        },
                        new
                        {
                            CoffeeId = 5,
                            SauceId = 4
                        });
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeTopping", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<int>("ToppingId")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("CoffeeTopping");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Milk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Milk");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.NonDiaryAlternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("NonDiaryAlternative");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("ItemsServed")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<string>("AddOns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoffeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vanilla Syrup",
                            Price = 0.5
                        },
                        new
                        {
                            Id = 2,
                            Name = "Caramel Syrup",
                            Price = 0.5
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hazelnut Syrup",
                            Price = 0.75
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chocolate Sauce",
                            Price = 0.59999999999999998
                        },
                        new
                        {
                            Id = 5,
                            Name = "Peppermint Syrup",
                            Price = 0.75
                        });
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Topping");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.UserCredential", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("HashPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Cart", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("CoffeeStoreManagementApp.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CartItem", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreManagementApp.Models.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeCapacity", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Capacity", "Capacity")
                        .WithMany("AllowedCoffees")
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreManagementApp.Models.Coffee", "Coffee")
                        .WithMany("AllowedCapacities")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capacity");

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeMilk", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Coffee", "Coffee")
                        .WithMany("AllowedMilks")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreManagementApp.Models.Milk", "Milk")
                        .WithMany("AllowedCoffees")
                        .HasForeignKey("MilkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Milk");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeNonDairyAlternative", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Coffee", "Coffee")
                        .WithMany("AllowedCoffeeNonDairyAlternatives")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreManagementApp.Models.NonDiaryAlternative", "NonDiaryAlternative")
                        .WithMany("AllowedCoffees")
                        .HasForeignKey("NonDairyAlternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("NonDiaryAlternative");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeSauce", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Coffee", "Coffee")
                        .WithMany("AllowedSauces")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreManagementApp.Models.Sauce", "Sauce")
                        .WithMany("AllowedCoffees")
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Sauce");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.CoffeeTopping", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Coffee", "Coffee")
                        .WithMany("AllowedToppings")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreManagementApp.Models.Topping", "Topping")
                        .WithMany("AllowedCoffees")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Order", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.OrderDetail", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.UserCredential", b =>
                {
                    b.HasOne("CoffeeStoreManagementApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Capacity", b =>
                {
                    b.Navigation("AllowedCoffees");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Coffee", b =>
                {
                    b.Navigation("AllowedCapacities");

                    b.Navigation("AllowedCoffeeNonDairyAlternatives");

                    b.Navigation("AllowedMilks");

                    b.Navigation("AllowedSauces");

                    b.Navigation("AllowedToppings");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Milk", b =>
                {
                    b.Navigation("AllowedCoffees");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.NonDiaryAlternative", b =>
                {
                    b.Navigation("AllowedCoffees");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Sauce", b =>
                {
                    b.Navigation("AllowedCoffees");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.Topping", b =>
                {
                    b.Navigation("AllowedCoffees");
                });

            modelBuilder.Entity("CoffeeStoreManagementApp.Models.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
